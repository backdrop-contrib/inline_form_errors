<?php

/**
 * @file
 * Add form errors inline.
 */

/**
 * Implements hook_config_info().
 */
function inline_form_errors_config_info() {
  $prefixes['inline_form_errors.settings'] = array(
    'label' => t('Inline Form Errors settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_menu().
 */
function inline_form_errors_menu() {
  $items['admin/config/system/inline_form_errors'] = array(
    'title' => 'Inline Form Errors',
    'description' => 'Configure Inline Form Errors.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('inline_form_errors_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'inline_form_errors.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_preprocess_form_element()
 *
 * @param array $variables
 */
function inline_form_errors_preprocess_form_element(&$variables){
  $element = &$variables['element'];
  $form_errors = form_get_errors();

  if (!empty($form_errors)) {
    foreach ($form_errors as $error_name => $error) {
      // Check current element #parents against both a constructed 'parents',
      // and constructed 'grandparents' in order to get best matches across many
      // field types.
      $error_parents = explode('][', $error_name);
      $error_grandparents = $error_parents;
      array_pop($error_grandparents);

      $normalized_parents = array_map('strval', $element['#parents']);
      if ($error_parents === $normalized_parents || $error_grandparents === $normalized_parents) {
        // This error belongs to this element.
        $label = $element['#title'];

        // Find the label.
        if (!$label && isset($element['#instance'])) {
          $label = $element['#instance']['label'];
        }
        if (!$label && isset($element['#entity_type'], $element['#bundle'])) {
          $instance = field_info_instance($element['#entity_type'], $element['#parents'][0], $element['#bundle']);
          $label = $instance['label'];
        }

        // Custom id, so we don't have to care what the form provides.
        $anchor_id = backdrop_html_id('inline-error-' . implode('-', $element['#parents']));

        if (config_get('inline_form_errors.settings', 'combine_top_error_messages')) {
          // Save the error somewhere we can use it later.
          backdrop_set_message(array(
            'id' => $anchor_id,
            'label' => $label,
            'error' => $error,
            'error_name' => $error_name,
          ), 'inline_form_errors');
        }

        $element['#title'] .= "<a class='inline-form-error-link' id='{$anchor_id}'></a>";
        $element['#children'] .= "<div class='messages error'>{$error}</div>";
      }
    }
  }
}

/**
 * Implements hook_preprocess_status_messages()
 *
 * @param array $variables
 */
function inline_form_errors_preprocess_status_messages(&$variables) {
  if (!config_get('inline_form_errors.settings', 'combine_top_error_messages')) {
    return;
  }

  $inline_form_errors = backdrop_get_messages('inline_form_errors');

  if (!empty($inline_form_errors['inline_form_errors'])) {
    $links = array();

    foreach ($inline_form_errors['inline_form_errors'] as $inline_error) {
      // Remove the existing error message.
      $key = FALSE;
      if (isset($_SESSION['messages']['error']) && is_array($_SESSION['messages']['error'])) {
        $key = array_search($inline_error['error'], $_SESSION['messages']['error']);
      }

      if ($key !== FALSE) {
        unset($_SESSION['messages']['error'][$key]);
      }

      // Build jump link from top-level item.
      $links[] = "<a href='#{$inline_error['id']}'>{$inline_error['label']}</a>";
    }

    if (count($links)) {
      // Add our new inline errors as a single 'error' message.
      backdrop_set_message(
        format_plural(count($links), '1 error has', '@count errors have') . ' been found: ' . implode(', ', $links),
        'error');
    }
  }
}
